# Files needed for your GitHub repository

## 1. index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Priority Matrix Builder</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .lucide { display: inline-block; vertical-align: text-bottom; }
    </style>
</head>
<body>
    <div id="root"></div>
    
    <script type="text/babel">
        // Lucide React icons as simple SVG components
        const Plus = () => (
            <svg className="lucide" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M5 12h14M12 5v14"/>
            </svg>
        );
        
        const X = () => (
            <svg className="lucide" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M18 6L6 18M6 6l12 12"/>
            </svg>
        );
        
        const Download = () => (
            <svg className="lucide" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5 5-5M12 15V3"/>
            </svg>
        );
        
        const RotateCcw = () => (
            <svg className="lucide" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/>
                <path d="M3 3v5h5"/>
            </svg>
        );

        const PriorityMatrixBuilder = () => {
            const [tasks, setTasks] = React.useState([]);
            const [newTask, setNewTask] = React.useState('');
            const [xAxisLabel, setXAxisLabel] = React.useState('Urgency');
            const [yAxisLabel, setYAxisLabel] = React.useState('Importance');
            const [draggedTask, setDraggedTask] = React.useState(null);

            const addTask = () => {
                if (newTask.trim()) {
                    const task = {
                        id: Date.now(),
                        text: newTask.trim(),
                        x: 50,
                        y: 50
                    };
                    setTasks([...tasks, task]);
                    setNewTask('');
                }
            };

            const removeTask = (id) => {
                setTasks(tasks.filter(task => task.id !== id));
            };

            const handleMatrixClick = (e) => {
                if (draggedTask) return;
                
                const rect = e.currentTarget.getBoundingClientRect();
                const x = ((e.clientX - rect.left) / rect.width) * 100;
                const y = ((e.clientY - rect.top) / rect.height) * 100;
                
                if (newTask.trim()) {
                    const task = {
                        id: Date.now(),
                        text: newTask.trim(),
                        x: Math.max(5, Math.min(95, x)),
                        y: Math.max(5, Math.min(95, y))
                    };
                    setTasks([...tasks, task]);
                    setNewTask('');
                }
            };

            const handleTaskMouseDown = (e, taskId) => {
                e.preventDefault();
                setDraggedTask(taskId);
            };

            const handleMouseMove = (e) => {
                if (!draggedTask) return;
                
                const rect = e.currentTarget.getBoundingClientRect();
                const x = ((e.clientX - rect.left) / rect.width) * 100;
                const y = ((e.clientY - rect.top) / rect.height) * 100;
                
                setTasks(tasks.map(task => 
                    task.id === draggedTask 
                        ? { ...task, x: Math.max(5, Math.min(95, x)), y: Math.max(5, Math.min(95, y)) }
                        : task
                ));
            };

            const handleMouseUp = () => {
                setDraggedTask(null);
            };

            const clearMatrix = () => {
                setTasks([]);
            };

            const exportMatrix = () => {
                const data = {
                    xAxisLabel,
                    yAxisLabel,
                    tasks: tasks.map(task => ({
                        text: task.text,
                        x: task.x,
                        y: task.y,
                        quadrant: getQuadrant(task.x, task.y)
                    }))
                };
                
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'priority-matrix.json';
                a.click();
                URL.revokeObjectURL(url);
            };

            const getQuadrant = (x, y) => {
                if (x >= 50 && y <= 50) return 'Q1: High ' + xAxisLabel + ', High ' + yAxisLabel;
                if (x < 50 && y <= 50) return 'Q2: Low ' + xAxisLabel + ', High ' + yAxisLabel;
                if (x < 50 && y > 50) return 'Q3: Low ' + xAxisLabel + ', Low ' + yAxisLabel;
                return 'Q4: High ' + xAxisLabel + ', Low ' + yAxisLabel;
            };

            const getQuadrantColor = (x, y) => {
                if (x >= 50 && y <= 50) return 'bg-red-100 border-red-300';
                if (x < 50 && y <= 50) return 'bg-yellow-100 border-yellow-300';
                if (x < 50 && y > 50) return 'bg-green-100 border-green-300';
                return 'bg-blue-100 border-blue-300';
            };

            return React.createElement('div', { className: 'min-h-screen bg-gray-50 p-6' },
                React.createElement('div', { className: 'max-w-6xl mx-auto' },
                    React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6 mb-6' },
                        React.createElement('h1', { className: 'text-3xl font-bold text-gray-800 mb-6 text-center' }, 'Priority Matrix Builder'),
                        
                        // Controls section
                        React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6' },
                            React.createElement('div', null,
                                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-2' }, 'X-Axis Label'),
                                React.createElement('input', {
                                    type: 'text',
                                    value: xAxisLabel,
                                    onChange: (e) => setXAxisLabel(e.target.value),
                                    className: 'w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500',
                                    placeholder: 'e.g., Urgency'
                                })
                            ),
                            React.createElement('div', null,
                                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-2' }, 'Y-Axis Label'),
                                React.createElement('input', {
                                    type: 'text',
                                    value: yAxisLabel,
                                    onChange: (e) => setYAxisLabel(e.target.value),
                                    className: 'w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500',
                                    placeholder: 'e.g., Importance'
                                })
                            ),
                            React.createElement('div', null,
                                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-2' }, 'Add New Task'),
                                React.createElement('div', { className: 'flex' },
                                    React.createElement('input', {
                                        type: 'text',
                                        value: newTask,
                                        onChange: (e) => setNewTask(e.target.value),
                                        onKeyPress: (e) => e.key === 'Enter' && addTask(),
                                        className: 'flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500',
                                        placeholder: 'Enter task name'
                                    }),
                                    React.createElement('button', {
                                        onClick: addTask,
                                        className: 'px-3 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 transition-colors'
                                    }, React.createElement(Plus))
                                )
                            ),
                            React.createElement('div', { className: 'flex flex-col gap-2' },
                                React.createElement('button', {
                                    onClick: clearMatrix,
                                    className: 'flex items-center justify-center gap-2 px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors'
                                }, React.createElement(RotateCcw), 'Clear'),
                                React.createElement('button', {
                                    onClick: exportMatrix,
                                    className: 'flex items-center justify-center gap-2 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors'
                                }, React.createElement(Download), 'Export')
                            )
                        ),

                        // Matrix section
                        React.createElement('div', { className: 'relative' },
                            React.createElement('div', {
                                className: 'relative w-full h-96 border-2 border-gray-300 bg-white cursor-crosshair',
                                onClick: handleMatrixClick,
                                onMouseMove: handleMouseMove,
                                onMouseUp: handleMouseUp,
                                onMouseLeave: handleMouseUp
                            },
                                // Quadrant backgrounds
                                React.createElement('div', { className: 'absolute top-0 right-0 w-1/2 h-1/2 bg-red-50' }),
                                React.createElement('div', { className: 'absolute top-0 left-0 w-1/2 h-1/2 bg-yellow-50' }),
                                React.createElement('div', { className: 'absolute bottom-0 left-0 w-1/2 h-1/2 bg-green-50' }),
                                React.createElement('div', { className: 'absolute bottom-0 right-0 w-1/2 h-1/2 bg-blue-50' }),
                                
                                // Grid lines
                                React.createElement('div', { className: 'absolute top-0 left-1/2 w-px h-full bg-gray-400' }),
                                React.createElement('div', { className: 'absolute left-0 top-1/2 w-full h-px bg-gray-400' }),
                                
                                // Axis labels
                                React.createElement('div', { className: 'absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-sm font-medium text-gray-600' }, xAxisLabel + ' →'),
                                React.createElement('div', { className: 'absolute -left-16 top-1/2 transform -translate-y-1/2 -rotate-90 text-sm font-medium text-gray-600' }, yAxisLabel + ' →'),
                                
                                // Quadrant labels
                                React.createElement('div', { className: 'absolute top-2 right-2 text-xs font-medium text-red-600 bg-white px-2 py-1 rounded' }, `Q1: High ${xAxisLabel}, High ${yAxisLabel}`),
                                React.createElement('div', { className: 'absolute top-2 left-2 text-xs font-medium text-yellow-600 bg-white px-2 py-1 rounded' }, `Q2: Low ${xAxisLabel}, High ${yAxisLabel}`),
                                React.createElement('div', { className: 'absolute bottom-2 left-2 text-xs font-medium text-green-600 bg-white px-2 py-1 rounded' }, `Q3: Low ${xAxisLabel}, Low ${yAxisLabel}`),
                                React.createElement('div', { className: 'absolute bottom-2 right-2 text-xs font-medium text-blue-600 bg-white px-2 py-1 rounded' }, `Q4: High ${xAxisLabel}, Low ${yAxisLabel}`),
                                
                                // Tasks
                                ...tasks.map((task) =>
                                    React.createElement('div', {
                                        key: task.id,
                                        className: `absolute transform -translate-x-1/2 -translate-y-1/2 cursor-move select-none ${getQuadrantColor(task.x, task.y)} px-3 py-2 rounded-lg border-2 shadow-sm hover:shadow-md transition-shadow max-w-32 text-center`,
                                        style: { 
                                            left: `${task.x}%`, 
                                            top: `${task.y}%`,
                                            zIndex: draggedTask === task.id ? 1000 : 1
                                        },
                                        onMouseDown: (e) => handleTaskMouseDown(e, task.id)
                                    },
                                        React.createElement('div', { className: 'text-xs font-medium text-gray-800 break-words' }, task.text),
                                        React.createElement('button', {
                                            onClick: (e) => {
                                                e.stopPropagation();
                                                removeTask(task.id);
                                            },
                                            className: 'absolute -top-2 -right-2 w-5 h-5 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors'
                                        }, React.createElement(X))
                                    )
                                )
                            )
                        ),

                        // Instructions
                        React.createElement('div', { className: 'mt-6 p-4 bg-gray-100 rounded-lg' },
                            React.createElement('h3', { className: 'font-semibold text-gray-800 mb-2' }, 'How to use:'),
                            React.createElement('ul', { className: 'text-sm text-gray-600 space-y-1' },
                                React.createElement('li', null, '• Add tasks using the input field above, then drag them to position on the matrix'),
                                React.createElement('li', null, '• Or click anywhere on the matrix to place a new task at that position'),
                                React.createElement('li', null, '• Drag tasks around to adjust their priority positioning'),
                                React.createElement('li', null, '• Customize the axis labels to match your priority criteria'),
                                React.createElement('li', null, '• Use the quadrants: Q1 (urgent/important), Q2 (important/not urgent), Q3 (neither), Q4 (urgent/not important)')
                            )
                        )
                    )
                )
            );
        };

        ReactDOM.render(React.createElement(PriorityMatrixBuilder), document.getElementById('root'));
    </script>
</body>
</html>
```

## 2. README.md
```markdown
# Priority Matrix Builder

A web-based tool for creating and managing priority matrices to help organize tasks and projects based on customizable criteria.

## Features

- **Customizable Axes**: Change labels from default "Urgency/Importance" to any criteria you need
- **Interactive Matrix**: Click to place tasks or drag existing tasks to reposition them
- **Visual Quadrants**: Color-coded sections following the Eisenhower Matrix methodology
- **Task Management**: Add, remove, and organize tasks with ease
- **Export Functionality**: Download your matrix as a JSON file for backup or sharing
- **Responsive Design**: Works on desktop and mobile devices

## How to Use

1. **Customize Your Axes**: Set your X and Y axis labels (e.g., "Impact" vs "Effort")
2. **Add Tasks**: Type a task name and either click "Add" or click directly on the matrix to place it
3. **Position Tasks**: Drag tasks around the matrix to position them according to your criteria
4. **Organize by Priority**: Use the four quadrants to categorize your tasks
5. **Export**: Save your matrix as a JSON file for future reference

## Quadrants

- **Q1 (Red)**: High X-axis, High Y-axis - Typically urgent and important tasks
- **Q2 (Yellow)**: Low X-axis, High Y-axis - Important but not urgent tasks
- **Q3 (Green)**: Low X-axis, Low Y-axis - Neither urgent nor important tasks
- **Q4 (Blue)**: High X-axis, Low Y-axis - Urgent but not important tasks

## Live Demo

Visit the live demo at: [Your GitHub Pages URL will go here]

## Technologies Used

- HTML5
- CSS3 (Tailwind CSS)
- JavaScript (React)
- No external dependencies required

## Installation

1. Clone this repository
2. Open `index.html` in your web browser
3. Start organizing your priorities!

## Contributing

Feel free to submit issues and enhancement requests!

## License

This project is open source and available under the [MIT License](LICENSE).
```

## 3. LICENSE (optional)
```
MIT License

Copyright (c) 2025 [Your Name]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
